#include <iostream>
#include <cstring>
#include <ctime>

struct avl {
    char *key;
    void *value;

    int height;
    avl *left;
    avl *right;
};

  ////////////////////////////////////////////////
 ///////////ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ//////////////
////////////////////////////////////////////////
int height(avl *tree);

void fixheight(avl *tree);

int bfactor(avl *tree);

avl *fixbalance(avl *tree);

  ///////////////////////////////////////////////
 //////////////////ПОВОРОТЫ/////////////////////
///////////////////////////////////////////////
avl *avltree_rl_rotate(avl *P);

avl *avltree_lr_rotate(avl *P);

avl *avltree_left_rotate(avl *tree);

avl *avltree_right_rotate(avl *tree);

/////////////////////////////////////////////////
/////СОЗДАНИЕ И ДОБАВЛЕНИЕ УЗЛА AVL ДЕРЕВА///////
/////////////////////////////////////////////////
avl *create_tree(char *key, void *value);

avl *avltree_add(avl *tree, char *key, void *value);

 /////////////////////////////////////////////////
 ///////////////ПОИСК В AVL ДЕРЕВЕ///////////////
////////////////////////////////////////////////
avl *lookup(avl *tree, char *key);
//Поиск минимального элемента
avl *min(avl *tree);
//Поиск максимального элемента
avl* max(avl* tree);

  /////////////////////////////////////////////////
 //////////////////Удаление узла//////////////////
/////////////////////////////////////////////////
//Возвращает минимальный узел для правого поддерева, для последующего удаления
avl *mindel(avl *tree);
//Удаление узла из дерева
avl *delnode(avl *tree, char *key);

void free_avl_tree(avl *tree);

  ////////////////////////////////////////////////
 ////////////////ВЫВОД AVL ДЕРЕВА////////////////
////////////////////////////////////////////////
void tree_out(avl* tree,int level);





